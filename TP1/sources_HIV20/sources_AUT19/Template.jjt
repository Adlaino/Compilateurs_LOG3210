options {
	JAVA_UNICODE_ESCAPE=true;
	STATIC=false;					// 1 seul parseur actif a la fois (+ rapide)
	MULTI=true;						// type noeud = f(nom noeud)
	VISITOR=true;					// Cree une methode accept(visiteur)
}

//
// PARSER DEFINITION
//

PARSER_BEGIN(Parser)

package analyzer.ast;

public class Parser
{
	public static ASTProgram ParseTree(java.io.InputStream input) throws ParseException
	{
		Parser c = new Parser(input);
		return c.Program();
	}
}

PARSER_END(Parser)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}




// Keywords
TOKEN :
{
	< IF: "if"	> |
	< ELSE: "else" > |
	< WHILE: "while" > |
	< DO: "do" > |
	< SWITCH: "switch" > |
	< CASE: "case" > |
    < DEF: "default" > |
    < BREAK: "break" > |
	< STRING: "string"> |
	< INT: "int"> |
	< FLOAT: "float" > |
	< BOOL: "bool"> |
	< PRINT: "print" > |
	< INPUT: "input" > |
	< IN: "in" >
	// À compléter au besoin
}

// Operators
TOKEN :
{
	< ASSIGN: < EQUAL >  > |
	< COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |
    < LOGIC: < AND > | < OR > > |
    < MULOP: <FOIS> | <DIV>  > |
	< #LESS: "<" > |
	< #LESSEQUAL: "<=" > |
	< #GREAT: ">" > |
	< #GREATEQUAL: ">=" > |
	< #DIFF: "!=" > |
	< #EQUALEQUAL: "==" > |

	< PLUS: "+" > |
	< MINUS: "-" > |
	< #FOIS: "*" > |
	< #DIV: "/" > |
    < NOT: "!" > |

	< #EQUAL: "=" > |
	< LPAREN: "(" > |
	< RPAREN: ")" > |
	< LACC: "{" > |
	< RACC: "}" > |
	< COLON: ":" > |
	< SEMICOLON: ";" > |
	< COMMA: "," > |
	< #AND: "&&" > |
	< #OR: "||" >
	// À compléter au besoin
}


// Identifiers and numbers
TOKEN :
{
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< #DIGIT: ["0"-"9"] > |
	< INTEGER: ["0"-"9"] (["0"-"9"])* > |
	// // Caution! Allows numbers such as "0000.23"
	< REAL: (<INTEGER>)* "." ( (<INTEGER>)* (<EXPONENT>)? (<INTEGER>)* )   > |
    < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}







//
// SYNTAX ANALYSIS
//

ASTProgram Program() : { }
{
	Block() <EOF> { return jjtThis;  }
}

void Block() #void: { }
{
	( Stmt() | <LACC> Block() <RACC> )*
}


void Stmt() #void : { }
{
	AssignStmt() |
	DoWhileStmt() |
	WhileStmt() |
	IfStmt() |
	SwitchStmt() |
	<SEMICOLON>
}

void AssignStmt() : { Token t;}
{
	Identifier() <ASSIGN> Expr()
}

void WhileStmt() : {}
{
	<WHILE> <LPAREN> Expr() <RPAREN> (Stmt()| <LACC> Block() <RACC>)
}

void DoWhileStmt() : {}
{
	<DO> <LACC> (Block()) <RACC> <WHILE> <LPAREN> Expr() <RPAREN>
}

void IfStmt() : {}
{
	<IF> <LPAREN> Expr() <RPAREN>  (
		Stmt() | (<LACC> Block() <RACC>)
		(<ELSE> (IfStmt() | <LACC> Block() <RACC>) )?
	)
}

void SwitchStmt() : {}
{
	<SWITCH> <LPAREN> Expr() <RPAREN> <LACC>
	(<CASE> Expr() <COLON>  (Block()))*
	[<DEF> <COLON> (Block())]
	<RACC>
}

void Expr() #void : {}
{
    IntExpr()
}

void IntExpr() #void  : {}
{
	IntComExpr() (<LOGIC> IntComExpr() )*
}

void IntComExpr() #void  : { Token t;}
{
	((IntAddExpr()) (<COMPARE> IntAddExpr())*) #Comparaison(>1)
}

void IntAddExpr() #void : { Token t;}
{
    (IntMulExpr() (LOOKAHEAD(2) (t = <PLUS> | t = <MINUS>) IntMulExpr() )*) #Addition(>1)
}

void IntMulExpr() #void : { Token t;}
{
	((IntNegExpr()|IntBasicExpr()) (<MULOP> (IntNegExpr()|IntBasicExpr()))*) #Multiplication(>1)
}

void IntNegExpr() #void : {Token t;}
{
    ((<MINUS> IntBasicExpr() | IntNotExpr())) #Subtraction(>1)
}

void IntNotExpr() #void : { Token t;}
 {
    ((<NOT>) + IntBasicExpr()) #Négation(>1)
 }

void IntBasicExpr() #void : {}
{
    BoolValue() |
    RealValue() |
	LOOKAHEAD(2) Identifier() |
	IntValue() |
	(<LPAREN> IntExpr() <RPAREN>)
}

void BoolValue() : { Token t;}
{
	t = <BOOL>
}

void Identifier() : { Token t;}
{
	t = <IDENTIFIER> {jjtThis.setValue(t.image);}
}

void IntValue() : { Token t;}
{
	t = <INTEGER> {jjtThis.setValue(Integer.parseInt(t.image));}
}

void RealValue() : { Token t;}
{
	t = <REAL> {jjtThis.setValue(Double.parseDouble(t.image));}
}
